// Default vars
// ---------------------------
$default-form-label-position: top !default;
$default-form-label-margin: 0 0 em($base-px/2) !default;
$default-form-label-breakpoint: $b !default;
$default-form-label-input-width: 66.66667% !default;

$default-form-main-color: $default !default;
$default-form-focus-color: $alt !default;
$default-form-type: text !default;
$default-form-state: $default-state !default;
$default-form-radius: $radius !default;
$default-form-shading: $default-shading !default;
$default-form-set-height: false !default;
$default-form-dry: $default-dry !default;

// Form label positioning
// ---------------------------
@mixin form-label(
	$position: $default-form-label-position,
	$margin: $default-form-label-margin,
	$breakpoint: $default-form-label-breakpoint,
	$input-width: $default-form-label-input-width
) {
	
	@if $position != left {
		@extend %form-block;
		&,
		& + input, 
		& + select, 
		& + textarea {
			@extend %form-block;
			margin: $margin; } }
	
	@else {
		width: 100%;
		
		@include respond-min($breakpoint) {
			display: inline-block;
			width: 100% - $input-width; }
			
		& + ul
		& + input, 
		& + select, 
		& + textarea {
			width: 100%;
			clear: left;
			
			@include respond-min($b) {
				display: inline-block;
				width: $input-width; } } } }

/* # To do
 * status: error, success, disabled
 * more efficient code
 * 	eg: $dry: true like element mixin
 */

// Form
// ---------------------------
@mixin form(
	$main-color: $default-form-main-color,
	$focus-color: $default-form-focus-color,
	$type: $default-form-type,
	$state: $default-form-state,
	$radius: $default-form-radius, 
	$shading: $default-form-shading,
	$set-height: $default-form-set-height,
	$dry: $default-form-dry) {
	
	$type: unquote($type);
		
	// styles which remain consistent no matter 
	// the input apart from submit buttons
	@if $dry == false and ($type != checkbox or $type != radio) {
		@extend %form-base;
		
		@if $radius { 
			border-radius: $radius; }
		
		@if $set-height and $type != textarea {
			@include set-height($set-height); }
		@else {
			padding: element-size($default-size, true); } }
	@else if $dry and ($type != checkbox or $type != radio) {
		@extend %form-base-with-mixin; }
	
	@if $type == checkbox or $type == radio {
		margin: 0 em($base-px/2) 0 0; }
	
	// select elements
	// ---------------------------
	@else if $type == select {
		@extend %input-reset;

		@if $shading {
			@include form-shading($main-color, $state, select);
			
			&:focus {
				@include form-shading($focus-color, focus, select); } } }
	
	// general inputs
	// ---------------------------
	@else if $type == text or $type == textarea {
		@extend %input-reset;
		@include form-shading($main-color, $state, text);
		
		@if $type == textarea {
			line-height: em($base-line-height); }
		
		&:focus {
			@include form-shading($focus-color, focus, text); } }
			
	@else if $type == submit {
		@warn "#{error("Please use element mixin to style submit buttons.")}"; }
	
	@else {
		@debug #{$type};
		@warn "#{error("Type not supported.")}"; } }
	
@mixin form-shading(
	$main-color: $default-form-main-color,
	$state: $default-form-state,
	$type: $default-form-type) {
	
	$bg-color: if(grayscale($main-color), $main-color, saturate($main-color, 100%));
	
	@if $type == text {
		@if $state != disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .2) -50%,
					rgba($bg-color, 0) 50%), $white); }
					
		@if $state == disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .35) -40%,
					rgba($bg-color, .15) 140%), $white); } }
		
	@if $type == select  {
		@if $state != disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .05) 40%,
					rgba($bg-color, .15) 60%), $white); }
		@if $state == disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .15) 46%,
					rgba($bg-color, .2) 54%), $white); } }
		
		box-shadow:
			if($type != select, 
				inset 0 1px scale-lightness($main-color, -20%),
				inset 0 -1px scale-lightness($main-color, -20%)),
			inset 0 0 0 1px $main-color,
			if($type != select, 
				inset 0 2px 3px rgba($main-color, .4),
				if($state != focus, 
					inset 0 1px 0 rgba($white, .4), compact(false))),
			if($state == focus, 
					0 0 6px rgba($main-color, .6), 
				compact(false)),
			if($type == select, 
				0 1px 2px rgba($black, $default-dark-shadow/3), 
				compact(false)),
			if($state == active, 
				0 1px 3px rgba($black, $default-dark-shadow),
				0 1px 1px rgba($white, $default-light-shadow));
	
	.no-boxshadow & {
		border: 1px solid $main-color; }
	
	.no-cssgradients & {
		background: $white; } }

@mixin form-base(
	$type: $default-form-type,
	$radius: $default-form-radius,
	$set-height: $default-form-set-height) {
	@extend %form-base;
	
	@if $radius { 
		border-radius: $radius; }
	
	@if $set-height and $type != textarea {
		@include set-height($set-height); }
		
	@else {
		padding: element-size($default-size, true); } }

// Placeholder styles
// ---------------------------
@mixin placeholder(
	$color: scale-color($primary, $lightness: 60%, $saturation: -35%)) {
	::-webkit-input-placeholder {
	 color: $color; }
	::-moz-placeholder {
	 	color: $color; }
	:-ms-input-placeholder {  
	 color: $color; } }

// The most consistent stuff for each form element
// ---------------------------
%form-base {
	border: none;
	font-family: $form;
	outline: none;
	max-width: 100%;
	color: $primary;
	line-height: normal; }

%form-base-with-mixin {
	@extend %form-base;
	@include form-base; }

%form-block {
	display: block;
	width: 100%; }

// Alternate form components
// ---------------------------
$default-search-selector: '[type="search"]';

@mixin form-search($search-selector: $default-search-selector) {
	#{unquote($search-selector)} {
		
	}
}