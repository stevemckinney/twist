// Form label positioning
// ---------------------------
@mixin form-label(
	$position: top) {
	
	$position: unquote($position);
	
	@if $position != left {
		@extend %form-block;
		margin: 0 0 em($base-px/2);
		& + input, & + select, & + textarea {
			@extend %form-block; } }
	@else {
		width: 100%;
		@include respond-min($b) {
			display: inline-block;
			width: (100% / 10) * 3; }
		& + input, & + select, & + textarea, & + ul {
			width: 100%;
			clear: left;
			@include respond-min($b) {
				display: inline-block;
				width: (100% / 10) * 7; } } } }

/* # To do
 * status: error, success, disabled
 * more efficient code
 * 	eg: $dry: true like element mixin
 */

// Form
// ---------------------------
@mixin form(
	$main-color: $default,
	$focus-color: $alt,
	$type: "input",
	$state: normal,
	$radius: $radius, 
	$shading: true,
	$set-height: true,
	$dry: false) {
	
	$type: unquote($type);
		
	// styles which remain consistent no matter 
	// the input apart from submit buttons
	@extend %form-base;
	
	@if $radius { 
		border-radius: $radius; }
	
	@if $set-height and $type != textarea {
		@include set-height($set-height); }
	@else {
		padding: element-size($default-size, true); }
	
	@if $type == checkbox or $type == radio {
		margin: 0 em($base-px/2) 0 0; }
	
	// select elements
	// ---------------------------
	@else if $type == select {
		@extend %input-reset;

		@if $shading {
			@include form-shading($main-color, $state, select);
			
			&:focus, &:hover {
				@include form-shading($focus-color, focus, select); } } }
	
	// general inputs
	// ---------------------------
	@else if $type == input or $type == textarea {
		@extend %input-reset;
		@include form-shading($main-color, $state, input);
		
		@if $type == textarea {
			line-height: $base-line-height; }
		
		&:focus {
			@include form-shading($focus-color, focus, input); } }
			
	@else if $type == submit {
		@warn "#{error("Please use element mixin to style submit buttons.")}"; }
	
	@else {
		@warn "#{error("Type not supported.")}"; } }
	
@mixin form-shading(
	$main-color,
	$state: normal,
	$type: input) {
	
	$bg-color: if(grayscale($main-color), $main-color, saturate($main-color, 100%));
	
	@if $state == disabled {
		background: scale-lightness($bg-color, 50%);
		box-shadow: inset 0 0 0 1px $main-color; }
	
	@else {
		@if $type == input {
			@include background(
				linear-gradient(
					rgba($bg-color, .15) 0%,
					rgba($bg-color, 0) 100%), $white); }
			
		@if $type == select  {
			@include background(
				linear-gradient(
					rgba($bg-color, .05) 46%,
					rgba($bg-color, .15) 54%), $white);
				
			@if $state == normal { 
				&:before {
					content: "\25BE";
					color: inherit;
					position: absolute;
					top: 0;
					right: em($base-px); } } }
			
		box-shadow:
			inset 0 0 0 1px $main-color,
			if($type != select, inset 0 2px 2px rgba($main-color, .4), inset 0 1px 0 rgba($white, .2)),
			if($state == focus, compact(inset 6px 0 12px -6px rgba($main-color, .3), inset -6px 0 12px -6px rgba($main-color, .3), 0 0 6px rgba($main-color, .6)), compact(false)),
			if($type == select, 0 1px 2px rgba($black, $default-dark-shadow/3), compact(false)),
			if($state == active, 0 1px 3px rgba($black, $default-dark-shadow), 0 1px 1px rgba($white, $default-light-shadow)); }
	
	.no-boxshadow & {
		border: 1px solid $main-color; }
	
	.no-cssgradients & {
		background: $white; } }

@mixin placeholder($color: scale-color($primary, $lightness: 40%, $saturation: -15%)) {
	::-webkit-input-placeholder {
	 color: $color; }
	::-moz-placeholder {
	 	color: $color; }
	:-ms-input-placeholder {  
	 color: $color; } }

@include placeholder;

// The most consistent stuff for each form element
// ---------------------------
%form-base {
	border: none;
	font-family: $form;
	outline: none;
	max-width: 100%;
	color: $primary; }
	
%form-block {
	display: block;
	width: 100%; }