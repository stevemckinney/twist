// Default vars
// ---------------------------
$default-form-label-position: top !default;

$default-form-main-color: $default !default;
$default-form-focus-color: $alt !default;
$default-form-type: text !default;
$default-form-state: $default-state !default;
$default-form-radius: $radius !default;
$default-form-shading: $default-shading !default;
$default-form-set-height: false !default;
$default-form-dry: $default-dry !default;

// Form label positioning
// ---------------------------
@mixin form-label($position: $default-form-label-position) {
	
	@if $position != left {
		@extend %form-block;
		margin: 0 0 em($base-px/2);
		& + input, & + select, & + textarea {
			@extend %form-block; } }
	@else {
		width: 100%;
		@include respond-min($b) {
			display: inline-block;
			width: (100% / 10) * 3; }
		& + input, & + select, & + textarea, & + ul {
			width: 100%;
			clear: left;
			@include respond-min($b) {
				display: inline-block;
				width: (100% / 10) * 7; } } } }

/* # To do
 * status: error, success, disabled
 * more efficient code
 * 	eg: $dry: true like element mixin
 */

// Form
// ---------------------------
@mixin form(
	$main-color: $default-form-main-color,
	$focus-color: $default-form-focus-color,
	$type: $default-form-type,
	$state: $default-form-state,
	$radius: $default-form-radius, 
	$shading: $default-form-shading,
	$set-height: $default-form-set-height,
	$dry: $default-form-dry) {
	
	$type: unquote($type);
		
	// styles which remain consistent no matter 
	// the input apart from submit buttons
	@if $dry == false {
		@extend %form-base;
		
		@if $radius { 
			border-radius: $radius; }
		
		@if $set-height and $type != textarea {
			@include set-height($set-height); }
		@else {
			padding: element-size($default-size, true); } }
	@else {
		@extend %form-base-with-mixin; }
	
	@if $type == checkbox or $type == radio {
		margin: 0 em($base-px/2) 0 0; }
	
	// select elements
	// ---------------------------
	@else if $type == select {
		@extend %input-reset;

		@if $shading {
			@include form-shading($main-color, $state, select);
			
			&:focus {
				@include form-shading($focus-color, focus, select); } } }
	
	// general inputs
	// ---------------------------
	@else if $type == text or $type == textarea {
		@extend %input-reset;
		@include form-shading($main-color, $state, text);
		
		@if $type == textarea {
			line-height: $base-line-height; }
		
		&:focus {
			@include form-shading($focus-color, focus, text); } }
			
	@else if $type == submit {
		@warn "#{error("Please use element mixin to style submit buttons.")}"; }
	
	@else {
		@debug #{$type};
		@warn "#{error("Type not supported.")}"; } }
	
@mixin form-shading(
	$main-color: $default-form-main-color,
	$state: $default-form-state,
	$type: $default-form-type) {
	
	$bg-color: if(grayscale($main-color), $main-color, saturate($main-color, 100%));
	
	@if $type == text {
		@if $state != disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .15) 0%,
					rgba($bg-color, 0) 100%), $white); }
		@if $state == disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .25) 0%,
					rgba($bg-color, .15) 100%), $white); } }
		
	@if $type == select  {
		@if $state != disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .05) 46%,
					rgba($bg-color, .15) 54%), $white); 
			&:before {
				content: "\25BE";
				color: inherit;
				position: absolute;
				top: 0;
				right: em($base-px); } }
		@if $state == disabled {
			@include background(
				linear-gradient(
					rgba($bg-color, .15) 46%,
					rgba($bg-color, .2) 54%), $white); } }
		
		box-shadow:
			inset 0 0 0 1px $main-color,
			if($type != select, inset 0 2px 2px rgba($main-color, .4), inset 0 1px 0 rgba($white, .2)),
			if($state == focus, compact(inset 6px 0 12px -6px rgba($main-color, .2), inset -6px 0 12px -6px rgba($main-color, .2), 0 0 6px rgba($main-color, .6)), compact(false)),
			if($type == select, 0 1px 2px rgba($black, $default-dark-shadow/3), compact(false)),
			if($state == active, 0 1px 3px rgba($black, $default-dark-shadow), 0 1px 1px rgba($white, $default-light-shadow));
	
	.no-boxshadow & {
		border: 1px solid $main-color; }
	
	.no-cssgradients & {
		background: $white; } }

@mixin form-base(
	$type: $default-form-type,
	$radius: $default-form-radius,
	$set-height: $default-form-set-height) {
	@extend %form-base;
	
	@if $radius { 
		border-radius: $radius; }
	
	@if $set-height and $type != textarea {
		@include set-height($set-height); }
	@else {
		padding: element-size($default-size, true); } }

// Placeholder styles
// ---------------------------
@mixin placeholder($color: scale-color($primary, $lightness: 40%, $saturation: -15%)) {
	::-webkit-input-placeholder {
	 color: $color; }
	::-moz-placeholder {
	 	color: $color; }
	:-ms-input-placeholder {  
	 color: $color; } }

// The most consistent stuff for each form element
// ---------------------------
%form-base {
	border: none;
	font-family: $form;
	outline: none;
	max-width: 100%;
	color: $primary;
	line-height: normal; }

%form-base-with-mixin {
	@extend %form-base;
	@include form-base; }

%form-block {
	display: block;
	width: 100%; }