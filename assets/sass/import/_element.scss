//	Element â€” A base, mixin and options
//	Style notices/alerts, buttons, etc 
//	-----------------------------------------
@mixin element(
	$main-color: $alt,
	$text-color: $white,
	$radius: $radius, 
	$subtle: false,
	$shadow: true,
	$style: true,
	$size: $default-size, 
	$hover: false,
	$font-size: false,
	$display: inline-block,
	$dry: false) {
	
	// Use element-base mixin to keep repetitive stuff together
	@if $dry == false {		
		@include element-base($size, $font-size, $text-color, $subtle, $radius, $display); }
	
	@if $style {
		// subtle start
		@if $subtle {
			.no-boxshadow & {
				border: 1px solid transparent; } } // close $subtle true
		
		// non subtle start		
		@else {
			@if $shadow {
				@include element-shading($main-color, normal, $text-color); }
			@else {
				background: $main-color; } } // close else
				
		@if $hover {
			&:hover, &:focus {
				@if $subtle { 
					color: $text-color; }
				@if $shadow {
					@include element-shading($main-color, hover); }
				@else {
					background: scale-lightness($main-color, 10%); } }
					
			&:active {
				z-index: 2; // makes button above others in a group
				@if $shadow {
					@include element-shading($main-color, active); }
				@else {
					background: scale-lightness($main-color, -10%); } } } } /* close $style */ }

// Separate the overall button style
// ---------------------------
@mixin element-shading(
	$main-color: $alt,
	$state: normal,
	$text-color: false) {
	
	@if $state == hover or $state == active { 
		$main-color: if($state == hover, scale-lightness($main-color, 10%), scale-lightness($main-color, if-bright($main-color, -10%, -5%))); }
	
	
	$light-color: scale-lightness($main-color, if-bright($main-color, 25%, 15%));
	$dark-color: scale-lightness($main-color, if-bright($main-color, -15%, -25%));
	
	@if red($main-color) > green($main-color) and 
			green($main-color) > blue($main-color) and
			green($main-color) > 90 {
			
				$dark-color: scale-lightness(
					adjust-hue($main-color, -12deg), 
					if-bright($main-color, -5%, -15%)); }
					
	@if blue($main-color) > green($main-color) and blue($main-color) > red($main-color) or
			green($main-color) > red($main-color) and 
			green($main-color) > blue($main-color) {
			
				$dark-color: scale-lightness(
					adjust-hue($main-color, 12deg), 
					if-bright($main-color, -5%, -15%)); }
	
	$shadow-color: scale-lightness($main-color, if-bright($main-color, -50%, -65%));
	
	// Apply edits to the button style here
	// ---------------------------	
	@include background(linear-gradient($main-color, $dark-color));
	
	text-shadow: 0 1px 1px if($text-color == $white, rgba($shadow-color, .6), rgba($light-color, .6));
	
	@include box-shadow(
		inset 0 0 0 1px rgba($shadow-color, .3),
		if($state == active,
			inset 0 1px 3px rgba($shadow-color, .6),
			inset 0 2px 0 rgba($light-color, .8)),
		inset 12px 0 18px -12px rgba($dark-color, .4),
		inset -12px 0 18px -12px rgba($dark-color, .4),
		if($state == active, 
			0 1px 1px rgba($white, .5),
			0 1px 3px rgba($shadow-color, .3)));
		
	// modernizr stuff
	.no-boxshadow & {
		border: 1px solid $dark-color; }
	.no-cssgradients & {
		background: $main-color; } }

// The most consistent stuff for each button
// ---------------------------
%element-base {
	@include background-clip;
	@include transition(none);
	@include appearance(none);
	@include user-select(none);
	position: relative;
	font-family: $element;
	line-height: 1;
	border: none; }

// Separated stuff that will more often than not be
// consistent so possibility for extending with this mixin
// ---------------------------
@mixin element-base(
	$size: $default-size,
	$font-size: false,
	$text-color: $white,
	$subtle: false,
	$radius: $radius,
	$display: inline-block) {
	@extend %element-base;
	&, &:hover, &:focus { color: $text-color; }
	@if $size != false {
		padding: element-size($size); }
	@if $font-size {	
		font-size: $font-size; }
	@if $radius {
		@include border-radius($radius); }
	display: $display; }

// Create proportionally sized buttons
// ---------------------------
@function element-size($size: 1, $ratio: .3125) {
  @return ($size * $ratio) + em (($size * 2) * $ratio) + em; }