//
//	Helpful RWD mixins
//


// target / context = result
// long length version
@function calc-percent($target, $container) {
  @return ($target / $container) * 100%; }
// shortcut
@function cp($target, $container) {
  @return calc-percent($target, $container); }

// px to em
@function em($target-px, $context) {
  @return ($target-px / $context) * 1em; }

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
// $base-font-size: set in _base.scss
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; } }

//	Simple media queries
@mixin respond-to($media) {
  @if $media == a {
    @media screen and (min-width: $a) { 
    	@content; } }
  @else if $media == b  {
    @media screen and (min-width: $b) { 
    	@content; } }
  @else if $media == c {
    @media screen and (min-width: $c) { 
    	@content; } }
  @else if $media == d {
    @media screen and (min-width: $d) { 
    	@content; } }
  @else if $media == e {
    @media screen and (min-width: $e) { 
    	@content; } }
  @else if $media == f {
    @media screen and (min-width: $f) { 
    	@content; } }
  // decisions behind this: https://gist.github.com/3446599
  @else if $media == retina {
    @media screen and (-webkit-min-device-pixel-ratio: 1.3), screen and (-o-min-device-pixel-ratio: 13/10), screen and (min-resolution: 120dpi) { 
    	@content; } }
  @else if $media == nonretina {
    @media screen and (-webkit-max-device-pixel-ratio: 1.3), screen and (-o-max-device-pixel-ratio: 13/10), screen and (max-resolution: 120dpi) { 
    	@content; } } }

// Better/flexible media queries, with old IE fallback see: https://github.com/jakearchibald/sass-ie
@mixin respond-min($width) {
	@if $fix-mqs {
		@if $fix-mqs >= $width {
			@content;	 } }
	@else {
		@media screen and (min-width: $width) {
			@content; } } }
@mixin respond-max($width) {
	@if $fix-mqs {
		@if $fix-mqs >= $width {
			@content; } }
	@else {
		@media screen and (max-width: $width) {
			@content; } } }

@mixin old-ie {
	@if $old-ie {
		@content; } }