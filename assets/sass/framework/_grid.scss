// Variables
// ---------------------------
$default-grid-namespace: "grid" !default;
$default-grid-column-namespace: "width" !default;
$default-grid-columns: 12 !default;
$default-grid-gutter: 12px !default;

// Add additional sizes if necessary, highly recommended you change this to be
// tailored to your breakpoints, that match the design.
$default-grid-map: $default-breakpoint-map !default;
$default-grid-font-size-normal: 1rem !default;

// Must be wrapped in a container with padding.
// Will cause a scrollbar if it's as wide as the viewport.
// ---------------------------
// General usage
// ---------------------------
// 	<div class="container">
//		<div class="grid grid-with-gutter">
//			<div class="grid-cell grid-4">
//			</div>
//			<div class="grid-cell grid-2">
//			</div>
//		</div>
//	</div>

// Grid container
// ---------------------------
@mixin grid-container($grid-gutter: $default-grid-gutter) {
	#{"." + unquote($default-grid-namespace)} {
		display: block;
		padding: 0;
		margin: 0;
		text-align: left;
		font-size: 0; }
	
	#{"." + unquote($default-grid-namespace)}-with-gutter {
		margin: 0 #{-$grid-gutter}; }
	
	#{"." + unquote($default-grid-namespace)}-center {
		text-align: center; }
	
	#{"." + unquote($default-grid-namespace)}-right {
		text-align: right; } }

// Grid cell
// ---------------------------
@mixin grid-cell-font-size($grid-map: $default-grid-map) {
	font-size: $default-grid-font-size-normal; }
		
@mixin grid-cell(
	$grid-gutter: $default-grid-gutter,
	$grid-map: $default-grid-map
) {
	.#{unquote($default-grid-namespace)}-cell {
		display: inline-block;
		
		@include grid-cell-font-size($grid-map); }

	#{"." + unquote($default-grid-namespace)}-with-gutter > .#{unquote($default-grid-namespace)}-cell {
		padding: 0 $grid-gutter; } }


// Grid widths
// ---------------------------					
@mixin grid-width(
	$grid-columns	: $default-grid-columns,
	$grid-map			: $default-grid-map
) {
	$column-increment: 1;
	
	@for $column-increment from 1 through $grid-columns {
		#{"." + unquote($default-grid-column-namespace)}-#{$column-increment} {
			$w: (100% / $grid-columns) * $column-increment;
			width: $w; } } }
					
@mixin grid-width-responsive(
	$grid-columns	: $default-grid-columns,
	$grid-map			: $default-grid-map
) {
	$column-increment: 1;
	
	@each $breakpoint, $width in $grid-map {
		$class: #{"." + unquote($default-grid-column-namespace)}-#{$breakpoint};
    
		@include breakpoint($width) {
			@for $column-increment from 1 through $grid-columns {
				#{$class}-#{$column-increment} {
					$w: (100% / $grid-columns) * $column-increment;
					width: $w; } } } } }
		
// Simple grid using
// display: inline-block
// ---------------------------
@mixin grid(
	$grid-columns	: $default-grid-columns,
	$grid-gutter	: $default-grid-gutter,
	$grid-map			: $default-grid-map
) {
  // Container styles
	@include grid-container($grid-gutter);
	
	// Basic cell styles
	@include grid-cell($grid-gutter, $grid-map);
	
	// Regular widths
	@include grid-width($grid-columns, $grid-map);
	
	// Make responsive widths
	@include grid-width-responsive($grid-columns, $grid-map); }