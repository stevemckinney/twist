// Helpful RWD functions/mixins
// ---------------------------

// target / context = result
// long length version
// ---------------------------
@function calc-percent($target, $container: $default-container) {
	@return ($target / $container) * 100%; }
// shortcut
@function cp($target, $container: $default-container) {
	@return calc-percent($target, $container); }

// px to em
// ---------------------------
@function em($target-px, $context: $default-context) {
	@return ($target-px / $context) * 1em; }

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is s to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
// $base-font-size: set in _base.scss
@mixin rem($property, $px-values) {
	// Convert the baseline into rems
	$baseline-rem: $base-font-size / 1rem;
	// Print the first line in pixel values
	#{$property}: $px-values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == "number" {
		#{$property}: $px-values / $baseline-rem; }
	@else {
		// Create an empty list that we can dump values into
		$rem-values: unquote("");
		@each $value in $px-values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem-values: append($rem-values, $value); }
			@else {
				$rem-values: append($rem-values, $value / $baseline-rem); } }
		// Return the property and its list of converted values
		#{$property}: $rem-values; } }

// Breakpoint mixin
// ---------------------------
$default-breakpoint-orientation: false !default;

@mixin breakpoint(
	$width: $default-breakpoint-width,
	$type: $default-breakpoint-type,
	$retina: $default-breakpoint-retina,
	$orientation: $default-breakpoint-orientation
) {
	
	$widths: $width;
	$width-1: nth($widths, 1);
	
	@if length($widths) > 1 { 
		$width-2: nth($widths, 2);
		
		@media (min-width: $width-1) and (max-width: $width-2) {
   		@content; } }
   		
  @else if $width == false and $retina {
		@media (-webkit-max-device-pixel-ratio: $default-breakpoint-pixel-ratio),
					 (min-resolution: $default-breakpoint-min-resolution) {
   		@content; } }
   		
	@else {
		@media (#{$type}-width: if($type == max, $width-1 - $breakpoint-subtract, $width-1)) {
   		@content; } } }
 


// idea from http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss 
// adapted for further efficiency
// ---------------------------
@mixin image-2x($image, $context: $default-context) {
	@include breakpoint(false, $retina: true) {
		background-image: url($image);
		background-size: em(image-width($image)/2, $context) em(image-height($image)/2, $context); } }