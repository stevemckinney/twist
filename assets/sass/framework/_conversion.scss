// Conversion mixins/functions
// ---------------------------

// Quadruple
@function quadruple($number) {
  @return $number * 4; }

@function triple($number) {
  @return $number * 3; }
  
// Double
@function double($number) {
  @return $number * 2; }

// Half
@function half($number) {
  @return $number / 2; }
  
// Quarter
@function quarter($number) {
  @return $number / 4; }

// target / context = result
// long length version
// ---------------------------
@function calc-percent($target, $container: $default-container) {
	@return ($target / $container) * 100%; }
	
// shortcut
@function cp($target, $container: $default-container) {
	@return calc-percent($target, $container); }

// px to em
// ---------------------------
@function em($target-px, $context: map-get($default, context)) {
	@return ($target-px / $context) * 1em; }

// px to rem
// ---------------------------
@function rem($target-px, $context: map-get($default, context)) {
	@return ($target-px / $context) * 1rem; }

// rem conversion
// ---------------------------
@mixin rem($property, $px-values) {
	// Convert the baseline into rems
	$baseline-rem: $base-font-size / 1rem;
	// Print the first line in pixel values
	.no-rem & { #{$property}: $px-values; }
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == "number" {
		#{$property}: $px-values / $baseline-rem; }
	@else {
		// Create an empty list that we can dump values into
		$rem-values: unquote("");
		@each $value in $px-values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem-values: append($rem-values, $value); }
			@else {
				$rem-values: append($rem-values, $value / $baseline-rem); } }
		// Return the property and its list of converted values
		#{$property}: $rem-values; } }

// Colour functions
// ---------------------------
// YIQ contrast function: https://github.com/timhettler/compass-yiq-color-contrast
$yiq-contrasted-dark-default: #666 !default;
$yiq-contrasted-light-default: #fff !default;
$yiq-contrasted-threshold: 200 !default;
$yiq-debug: false !default;

@function yiq-is-light(
	$color,
	$threshold: $yiq-contrasted-threshold
) {
	$yiq-red: red($color);
	$yiq-green: green($color);
	$yiq-blue: blue($color);

	$yiq: (($yiq-red*299)+($yiq-green*587)+($yiq-blue*114))/1000;

	@if $yiq-debug { @debug $yiq, $threshold, "color: " $color; }

	@return if($yiq >= $threshold, true, false); }

@function yiq-contrast-color(
	$color,
	$dark: $yiq-contrasted-dark-default,
	$light: $yiq-contrasted-light-default,
	$threshold: $yiq-contrasted-threshold
) {
	@return if(yiq-is-light($color, $threshold), $dark, $light); }

@mixin yiq-contrasted(
	$background-color,
	$dark: $yiq-contrasted-dark-default,
	$light: $yiq-contrasted-light-default,
	$threshold: $yiq-contrasted-threshold
) {
	background-color: $background-color;
	color: yiq-contrast-color($background-color, $dark, $light, $threshold); }

@function yiq($color) {
	@return yiq-is-light($color); }

@function yiq-value($color) {
	$yiq-red: red($color);
	$yiq-green: green($color);
	$yiq-blue: blue($color);

	$yiq: (($yiq-red*299)+($yiq-green*587)+($yiq-blue*114))/1000;
	@debug "yiq: " + $yiq + " color: " + $color + " red: " + $yiq-red*299 + " green: " + $yiq-green*587 + " blue: " + $yiq-blue*114;
	@return $yiq; }

// Taken from: https://github.com/imathis/nice-buttons
// Returns true if the color is brighter than 50% lightness
@function is-bright($color) {
	@return (lightness($color) > 50%); }

// Percentage based conditional brightness
// ---------------------------
@function if-brightness($color, $brightness: 80%) {
	@return (lightness($color) > $brightness); }

// Picks the color with the highest contrast
@function if-bright($color, $light: true, $dark: false) {
	@return if(is-bright($color), $light, $dark); }
	
// Picks the color with the highest contrast
@function text-contrast($bg, $dark-text: #666, $light-text: rgba($text-color, .9)) {
	@return if-bright($bg, $dark-text, $light-text); }

// Returns true if the color greater than 50% saturation
@function is-saturated($color) {
	@return (saturation($color) > 50%); }

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1); }

  @return $number; }

@function font-size-lock($min-font-size, $max-font-size, $min-screen-width, $max-screen-width) {
  @return calc(#{$min-font-size} + ( ( #{strip-unit($max-font-size)} - #{strip-unit($min-font-size)} ) * (100vw - #{$min-screen-width}) / (#{strip-unit($max-screen-width)} - #{strip-unit($min-screen-width)}))); }